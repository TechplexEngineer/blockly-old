{namespace planepage}

/**
 * This is a Closure Template.  Build multilingually:
 *
 * # Create en.js.
 * java -jar ../_soy/SoyToJsSrcCompiler.jar --outputPathFormat en.js --srcs template.soy
 *
 * # Extract messages from template.soy.
 * java -jar ../_soy/SoyMsgExtractor.jar --outputFile extracted_msgs.xlf template.soy
 *
 * # Create en.json, qqq.json.
 * ../../i18n/xliff_to_json.py extracted_msgs.xlf
 *
 * Once translations have been made into <LANG>.json:
 *
 * # Create *.xlf.  By default, qqq.json and keys.json are skipped.
 * ../../i18n/json_to_xliff.py *.json
 *
 * # Create .js files by running script recommended by previous command.  It will
 * # start with "java -jar ../../apps/_soy/SoyToJsSrcCompiler.jar".
 *
 * # The .xlf files may be deleted.  They should not be checked in.
 * rm *.xlf
 */

/**
 * Web page structure.
 */
{template .start}
  <div id="MSG" style="display: none">
    <span id="rows">{msg meaning="Plane.rows" desc="Total number of rows of seats on a plane.  %1 is an integer greater or equal to zero."}Rows: %1{/msg}</span>
    <span id="getRows">{msg meaning="Plane.getRows" desc="Last term of mathematical equation.  E.g. seats = 4 * rows (5).  %1 is an integer greater or equal to zero."}rows (%1){/msg}</span>
    <span id="rows1">{msg meaning="Plane.rows1" desc="Total number of rows of first class seats on a plane.  %1 is an integer greater or equal to zero."}1st class rows: %1{/msg}</span>
    <span id="getRows1">{msg meaning="Plane.getRows1" desc="Last term of mathematical equation.  E.g. seats = 4 * 1st class rows (5).  %1 is an integer greater or equal to zero."}1st class rows (%1){/msg}</span>
    <span id="rows2">{msg meaning="Plane.rows2" desc="Total number of rows of second class seats on a plane.  %1 is an integer greater or equal to zero.."}2nd class rows: %1{/msg}</span>
    <span id="getRows2">{msg meaning="Plane.getRows2" desc="Last term of mathematical equation.  E.g. seats = 4 * 2nd class rows (5).  %1 is an integer greater or equal to zero."}2nd class rows (%1){/msg}</span>
    <span id="seats">{msg meaning="Plane.seats" desc="Total number of seats on a plane.  %1 is an integer greater or equal to zero."}Seats: %1{/msg}</span>
    <span id="setSeats">{msg meaning="Plane.setSeats" desc="First half of mathematical equation.  E.g. seats = 4 * rows"}seats ={/msg}</span>
  </div>

  <div style="display: none;"><select id="languageMenu" onchange="BlocklyApps.changeLanguage();"></select></div>
  <h1>
    <span id="title">
      <a href="../index.html">{{msg meaning="Apps.blocklyMessage" desc="The project name.  If readers of your language would know approximately how to pronounce 'Blockly', leave unchanged.  Otherwise, include a transliteration in parentheses, such as the Russian: 'Blockly (Блoкли)'.  This should be identical to {lb}{lb}msg-blockly|Maze-Apps.blocklyMessage{rb}{rb}."}}Blockly{{/msg}}</a>
      {sp}:{sp}
      {msg meaning="Plane.plane" desc="brief title - Specifies that this is Blockly's '''Plane''' tutorial."}
        Plane
      {/msg}
    </span>
    {sp}&nbsp;{sp}
    {for $i in range(1, 4)}
      {sp}
      {if $i == $ij.level}
        <span class="tab" id="selected">{$i}</span>
      {else}
        {if $i < $ij.level}
          <a class="tab previous" href="?lang={$ij.lang}&level={$i}">{$i}</a>
        {else}
          <a class="tab" href="?lang={$ij.lang}&level={$i}">{$i}</a>
        {/if}
      {/if}
    {/for}
  </h1>

  <script type="text/javascript" src="../slider.js"></script>
  <svg
     id="plane"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:svg="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     version="1.1"
     width="600"
     height="256"
     viewBox="0 142 600 256">
    <defs>
      <g id="row1st">
        <rect
           class="seat1st"
           width="10" height="10"
           x="75" y="245" />
        <rect
           class="seat1st"
           width="10" height="10"
           x="75" y="256" />
        <rect
           class="seat1st"
           width="10" height="10"
           x="75" y="274" />
        <rect
           class="seat1st"
           width="10" height="10"
           x="75" y="285" />
      </g>
      <g id="row2nd">
        <rect
           class="seat2nd"
           width="10" height="8"
           x="75" y="245" />
        <rect
           class="seat2nd"
           width="10" height="8"
           x="75" y="253" />
        <rect
           class="seat2nd"
           width="10" height="8"
           x="75" y="271" />
        <rect
           class="seat2nd"
           width="10" height="8"
           x="75" y="279" />
        <rect
           class="seat2nd"
           width="10" height="8"
           x="75" y="287" />
      </g>
      <linearGradient id="grad1" x1="0%" y1="100%" x2="0%" y2="0%">
        <stop offset="0%" style="stop-color:#fff;stop-opacity:0" />
        <stop offset="100%" style="stop-color:#fff;stop-opacity:1" />
      </linearGradient>
      <linearGradient id="grad2" x1="0%" y1="0%" x2="0%" y2="100%">
        <stop offset="0%" style="stop-color:#fff;stop-opacity:0" />
        <stop offset="100%" style="stop-color:#fff;stop-opacity:1" />
      </linearGradient>
    </defs>
    <path
        d="M 404,1 373,15 230,244 230,297 373,524 404,542 330,351 330,189 z"
        id="wing" />
    <path
        d="m 577,269 22,-93 -27,6 -44,88 44,88 27,6 z"
        id="tail" />
    <path
        d="m 483,296 h -407 c -38,0 -75,-13 -75,-26 c 0,-13 38,-26 75,-26 h 407 l 94,24 z"
        id="fuselage" />
    <rect
       width="610"
       height="100"
       x="-5"
       y="142"
       fill="url(#grad1)" />
    <rect
       width="610"
       height="100"
       x="-5"
       y="298"
       fill="url(#grad2)" />
    <text id="row1stText" x="55" y="380"></text>
    <text id="row2ndText" x="350" y="380"></text>
    <text x="55" y="210">
      <tspan id="seatText"></tspan>
      <tspan id="seatYes" style="fill: #0c0;" dy="10">&#x2713;</tspan>
      <tspan id="seatNo" style="fill: #f00;" dy="10">&#x2717;</tspan>
    </text>
    {if $ij.level > 1}
      <rect
          id="crew_right" class="crew"
          width="10" height="10"
          x="35" y="256" />
      <rect
          id="crew_left" class="crew"
          width="10" height="10"
          x="35" y="274" />
    {/if}
  </svg>

  <p>
    {switch $ij.level}
      {case 1}
        {msg meaning="Plane.description1" desc="description - There is only one type of seat on this plane."}An airplane has a number of rows of passenger seats.  Each row contains four seats.{/msg}
      {case 2}
        {msg meaning="Plane.description2" desc="description - There are two types of seats on this plane."}An airplane has two seats in the flight deck (for the pilot and co-pilot), and a number of rows of passenger seats.  Each row contains four seats.{/msg}
      {case 3}
        {msg meaning="Plane.description3" desc="description - There are three types of seats on this plane."}An airplane has two seats in the flight deck (for the pilot and co-pilot), and a number of rows of 1st class and 2nd class passenger seats.  Each 1st class row contains four seats. Each 2nd class row contains five seats.{/msg}
    {/switch}
  </p>
  <p>
    {msg meaning="Plane.instructions" desc="instructions - The formula is located below this text and he airplane graphic is located above this text.  The number of rows an the graphic may be changed by the user with a slider."}Build a formula (below) that calculates the total number of seats on the airplane as the rows are changed (above).{/msg}
  </p>

  <script type="text/javascript" src="../../blockly_compressed.js"></script>
  <script type="text/javascript" src="../../javascript_compressed.js"></script>
  <script type="text/javascript" src="../../{$ij.langSrc}"></script>
  <script type="text/javascript" src="blocks.js"></script>
  {call .toolbox /}
  <div id="blockly"></div>

{/template}

/**
 * Toolboxes for each level.
 */
{template .toolbox}
  <xml id="toolbox" style="display: none">
    <block type="math_number"></block>
    <block type="math_arithmetic"></block>
    <block type="math_arithmetic">
      <title name="OP">MULTIPLY</title>
    </block>
    {if $ij.level <= 2}
      <block type="plane_get_rows"></block>
    {else}
      <block type="plane_get_rows1st"></block>
      <block type="plane_get_rows2nd"></block>
    {/if}
  </xml>
{/template}
